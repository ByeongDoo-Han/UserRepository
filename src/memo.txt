
App - 실제 프로그램을 구동시키는 main 메서드가 존재하는 곳입니다.
      해당 클래스에서 프로그램을 run 시킬 수 있습니다.
      어떤 ui와 어떤 db를 사용할지 지정해줄 수 있습니다.

presentation(Controller) - 유저들에게 어떤 ui를 사용할지 보여주는 부분입니다.

                           원래는, presentation과 application 계층을 나누지만, 이 프로그램에서는 간소화해
                           두 계층을 presentation 계층으로 합쳤습니다.(이러면 절대 안됩니다.)

                           presentation에는 사용자에게 보여지기 위한 로직을 작성하고,
                           application(서비스로직)만을 바라보게 합니다.
                           presentation에서 입력받은 값들을 application 계층으로 넘겨주기만 하고,
                           application이 뱉어주는 값을 받아오는 역할입니다.


application(Service) -     해당 프로그램에서는, 간소화를 위해 presentation 계층에 합쳐놨습니다. (원래 이렇게 하면 안됩니다.)

                           원래, application 에서는 서비스의 중요한 로직을 담당한다고 생각하시면 됩니다.
                           원래, application은 data계층만 바라봅니다.
                           presentation에서 application에게 어떤 값들을 넣어서 요청을 합니다.
                           그러면 넘어온 값들을 바탕으로 적절히 data 계층에게 해당 값들을 처리해달라고 요청합니다.
                           그러면 DB가 값을 뱉어줄거고, 그 뱉어준 값에 알맞게 application에서 서비스 로직을 수행합니다.
                           로직이 끝나면 어떤 return 값을 뱉어내겠죠?
                           그 return 값을 presentation 계층이 주워먹습니다.

                           이 프로젝트에서는, 어떤 entity가 있는지, 어떤 exception이 있는지만 넣어두었습니다.(이러면 안됩니다.)

data(Repository) -         application에서 올라온 값들을 바탕으로 DB와 소통하는 단계 입니다.
                           DB에 값을 저장하거나, 저장된 값을 찾거나, 데이터를 삭제하는 등의 로직을 담당하며,
                           해당 로직의 결과물을 application에게 뱉어줍니다.